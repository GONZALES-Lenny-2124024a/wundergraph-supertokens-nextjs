{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import {\n\tauthProviders,\n\tconfigureWunderGraphApplication,\n\tcors,\n\tEnvironmentVariable,\n\tintrospect,\n\ttemplates,\n} from '@wundergraph/sdk';\nimport { NextJsTemplate } from '@wundergraph/nextjs/dist/template';\nimport server from './wundergraph.server';\nimport operations from './wundergraph.operations';\n\nconst countries = introspect.graphql({\n\tapiNamespace: 'countries',\n\turl: 'https://countries.trevorblades.com/graphql',\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n\tapis: [countries],\n\tserver,\n\toperations,\n\tgenerate: {\n\t\tcodeGenerators: [\n\t\t\t{\n\t\t\t\ttemplates: [new NextJsTemplate()],\n\t\t\t\tpath: '../components/generated',\n\t\t\t},\n\t\t],\n\t},\n\tcors: {\n\t\t...cors.allowAll,\n\t\tallowedOrigins: ['http://localhost:3003'],\n\t},\n\tauthentication: {\n\t\ttokenBased: {\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tjwksURL: \"http://localhost:3003/api/auth/jwt/jwks.json\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\tsecurity: {\n\t\tenableGraphQLEndpoint: process.env.NODE_ENV !== 'production',\n\t},\n});\n", "import { configureWunderGraphServer } from '@wundergraph/sdk/server';\n\nexport default configureWunderGraphServer(() => ({\n\thooks: {\n\t\tglobal: {\n\t\t\thttpTransport: {\n\t\t\t\tonOriginRequest: {\n\t\t\t\t\tenableForAllOperations: true,\n\t\t\t\t\thook: async ({ request, user }) => {\n\t\t\t\t\t\tif (user && user.rawIdToken) {\n\t\t\t\t\t\t\trequest.headers.set('Authorization', `Bearer ${user.rawIdToken}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn request;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tqueries: {},\n\t\tmutations: {},\n\t},\n\tgraphqlServers: [],\n}));\n", "import { configureWunderGraphOperations } from '@wundergraph/sdk';\nimport type { OperationsConfiguration } from './generated/wundergraph.operations';\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n\toperations: {\n\t\tdefaultConfig: {\n\t\t\tauthentication: {\n\t\t\t\trequired: false,\n\t\t\t},\n\t\t},\n\t\tqueries: (config) => ({\n\t\t\t...config,\n\t\t\tcaching: {\n\t\t\t\tenable: false,\n\t\t\t\tstaleWhileRevalidate: 60,\n\t\t\t\tmaxAge: 60,\n\t\t\t\tpublic: true,\n\t\t\t},\n\t\t\tliveQuery: {\n\t\t\t\tenable: true,\n\t\t\t\tpollingIntervalSeconds: 1,\n\t\t\t},\n\t\t}),\n\t\tmutations: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tsubscriptions: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tcustom: {\n\t\t\tCountry: (config) => ({\n\t\t\t\t...config,\n\t\t\t\tauthentication: {\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t},\n});\n"],
  "mappings": ";AAAA,IAAAA,cAOO;AACP,sBAA+B;;;ACR/B,oBAA2C;AAE3C,IAAO,iCAAQ,0CAA2B,OAAO;AAAA,EAChD,OAAO;AAAA,IACN,QAAQ;AAAA,MACP,eAAe;AAAA,QACd,iBAAiB;AAAA,UAChB,wBAAwB;AAAA,UACxB,MAAM,OAAO,EAAE,SAAS,KAAK,MAAM;AAClC,gBAAI,QAAQ,KAAK,YAAY;AAC5B,sBAAQ,QAAQ,IAAI,iBAAiB,UAAU,KAAK,YAAY;AAAA,YACjE;AACA,mBAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,IACA,SAAS,CAAC;AAAA,IACV,WAAW,CAAC;AAAA,EACb;AAAA,EACA,gBAAgB,CAAC;AAClB,EAAE;;;ACrBF,iBAA+C;AAG/C,IAAO,qCAAQ,2CAAwD;AAAA,EACtE,YAAY;AAAA,IACX,eAAe;AAAA,MACd,gBAAgB;AAAA,QACf,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,SAAS,CAAC,YAAY;AAAA,MACrB,GAAG;AAAA,MACH,SAAS;AAAA,QACR,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACT;AAAA,MACA,WAAW;AAAA,QACV,QAAQ;AAAA,QACR,wBAAwB;AAAA,MACzB;AAAA,IACD;AAAA,IACA,WAAW,CAAC,YAAY;AAAA,MACvB,GAAG;AAAA,IACJ;AAAA,IACA,eAAe,CAAC,YAAY;AAAA,MAC3B,GAAG;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACP,SAAS,CAAC,YAAY;AAAA,QACrB,GAAG;AAAA,QACH,gBAAgB;AAAA,UACf,UAAU;AAAA,QACX;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,CAAC;;;AF1BD,IAAM,YAAY,uBAAW,QAAQ;AAAA,EACpC,cAAc;AAAA,EACd,KAAK;AACN,CAAC;AAAA,IAGD,6CAAgC;AAAA,EAC/B,MAAM,CAAC,SAAS;AAAA,EAChB;AAAA,EACA;AAAA,EACA,UAAU;AAAA,IACT,gBAAgB;AAAA,MACf;AAAA,QACC,WAAW,CAAC,IAAI,+BAAe,CAAC;AAAA,QAChC,MAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AAAA,EACA,MAAM;AAAA,IACL,GAAG,iBAAK;AAAA,IACR,gBAAgB,CAAC,uBAAuB;AAAA,EACzC;AAAA,EACA,gBAAgB;AAAA,IACf,YAAY;AAAA,MACX,WAAW;AAAA,QACV;AAAA,UACC,SAAS;AAAA,QACV;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACA,UAAU;AAAA,IACT,uBAAuB,QAAQ,IAAI,aAAa;AAAA,EACjD;AACD,CAAC;",
  "names": ["import_sdk"]
}
